AWSTemplateFormatVersion: 2010-09-09
Resources:
  AppService:
    DependsOn:
    - AppTCP80Listener
    - DbService
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: app
        ContainerPort: 80
        TargetGroupArn:
          Ref: AppTCP80TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: PsqlNetwork
          Subnets:
          - subnet-aee0bac9
          - subnet-f11167aa
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - AppServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: api
      - Key: com.docker.compose.service
        Value: app
      TaskDefinition:
        Ref: AppTaskDefinition
    Type: AWS::ECS::Service
  AppServiceDiscoveryEntry:
    Properties:
      Description: '"app" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: app
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  AppTCP80Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: AppTCP80TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  AppTCP80TargetGroup:
    Properties:
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: com.docker.compose.project
        Value: api
      TargetType: ip
      VpcId: vpc-b17ee2d6
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  AppTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-west-1.compute.internal
        - api.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: api
        Name: App_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: App_ResolvConf_InitContainer
        Environment:
        - Name: HOST
          Value: db
        Essential: true
        Image: 743750537978.dkr.ecr.us-west-1.amazonaws.com/test-ecr:latest@sha256:f42b8e7d635a13f4f8c7378c29a43db66aa906017c66ac9bddd43fdb66b81839
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: api
        Name: app
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
          Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: AppTaskExecutionRole
      Family: api-app
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  AppTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: api
      - Key: com.docker.compose.service
        Value: app
    Type: AWS::IAM::Role
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project api
      Name: api.local
      Vpc: vpc-b17ee2d6
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: api
      Tags:
      - Key: com.docker.compose.project
        Value: api
    Type: AWS::ECS::Cluster
  DbService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: PsqlNetwork
          Subnets:
          - subnet-aee0bac9
          - subnet-f11167aa
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - DbServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: api
      - Key: com.docker.compose.service
        Value: db
      TaskDefinition:
        Ref: DbTaskDefinition
    Type: AWS::ECS::Service
  DbServiceDiscoveryEntry:
    Properties:
      Description: '"db" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: db
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  DbTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-west-1.compute.internal
        - api.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: api
        Name: Db_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Db_ResolvConf_InitContainer
        Environment:
        - Name: POSTGRES_DB
          Value: PernStackExample
        - Name: POSTGRES_PASSWORD
          Value: psql7lOgin&
        Essential: true
        Image: docker.io/library/postgres:14.4@sha256:3e2eba0a6efbeb396e086c332c5a85be06997d2cf573d34794764625f405df4e
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: api
        Name: db
      Cpu: "256"
      ExecutionRoleArn:
        Ref: DbTaskExecutionRole
      Family: api-db
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  DbTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: api
      - Key: com.docker.compose.service
        Value: db
    Type: AWS::IAM::Role
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: PsqlNetwork
      Subnets:
      - subnet-aee0bac9
      - subnet-f11167aa
      Tags:
      - Key: com.docker.compose.project
        Value: api
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/api
    Type: AWS::Logs::LogGroup
  Psql80Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: app:80/tcp on psql network
      FromPort: 80
      GroupId:
        Ref: PsqlNetwork
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  PsqlNetwork:
    Properties:
      GroupDescription: api Security Group for psql network
      Tags:
      - Key: com.docker.compose.project
        Value: api
      - Key: com.docker.compose.network
        Value: api_psql
      VpcId: vpc-b17ee2d6
    Type: AWS::EC2::SecurityGroup
  PsqlNetworkIngress:
    Properties:
      Description: Allow communication within network psql
      GroupId:
        Ref: PsqlNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: PsqlNetwork
    Type: AWS::EC2::SecurityGroupIngress